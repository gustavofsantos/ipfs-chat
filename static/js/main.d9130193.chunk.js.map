{"version":3,"sources":["state/app-context.js","components/new-message.js","state/state-types.js","state/state-actions.js","components/join-form.js","pages/join-page.js","components/header.js","components/message.js","components/messages.js","pages/chat-page.js","state/app-reducer.js","App.js","serviceWorker.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","AppStateContext","AppDispatchContext","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","React","createContext","NewMessage","_useState","useState","_useState2","Object","C_Users_gusta_workspace_projects_ipfs_chat_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","message","setMessage","_useContext","useContext","ipfs","topic","user","handleChange","useCallback","ev","target","value","handleSubmit","preventDefault","pubsub","publish","Buffer","from","JSON","stringify","fromUser","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","Fragment","className","onSubmit","onChange","type","SET_IPFS","SET_USER","SET_TOPIC","PUSH_MESSAGE","actionPushMessage","payload","actionSetUser","actionSetTopic","actionSetIpfsNode","withRouter","slicedToArray","setUser","_useState3","_useState4","setTopic","dispatch","handleJoin","react_default","placeholder","props","state","history","useEffect","window","Ipfs","EXPERIMENTAL","repo","concat","Math","random","config","Addresses","Swarm","once","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","id","sent","subscribe","msg","push","stop","e","join_form","Header","Message","msgId","seqno","toString","rawMessage","data","dataMessage","parse","key","Messages","messages","map","new_message","INITIAL_STATE","reducer","action","objectSpread","toConsumableArray","App","_useReducer","useReducer","_useReducer2","app_context","Provider","react_router_dom","basename","react_router","path","exact","component","JoinPage","ChatPage","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d9130193.chunk.js","sourcesContent":["import React from 'react';\n\nexport const AppStateContext = React.createContext(null);\nexport const AppDispatchContext = React.createContext(null);\n","import React, { useCallback, useState, useContext } from 'react';\nimport { AppStateContext } from '../state/app-context';\n\nexport default function NewMessage() {\n  const [message, setMessage] = useState('');\n  const { ipfs, topic, user } = useContext(AppStateContext);\n\n  const handleChange = useCallback((ev) => {\n    setMessage(ev.target.value);\n  }, []);\n\n  const handleSubmit = useCallback((ev) => {\n    ev.preventDefault();\n\n    ipfs.pubsub.publish(topic, Buffer.from(JSON.stringify({\n      fromUser: user,\n      message,\n    })));\n\n    setMessage('');\n  }, [message, ipfs, topic, user]);\n\n  return (\n    <React.Fragment>\n      <form className=\"new-message\" onSubmit={handleSubmit}>\n        <input className=\"new-message__input\" value={message} onChange={handleChange} />\n        <button className=\"new-message__button\" type=\"submit\">send</button>\n      </form>\n    </React.Fragment>\n  );\n}\n","export const SET_IPFS = 'APP_SET_IPFS_NODE';\n\n// chat action types\nexport const SET_USER = 'CHAT_SET_USER';\nexport const SET_TOPIC = 'CHAT_SET_TOPIC';\nexport const PUSH_MESSAGE = 'CHAT_PUSH_MESSAGE';\n","import {\n  PUSH_MESSAGE, SET_IPFS, SET_TOPIC, SET_USER,\n} from './state-types';\n\nexport const actionPushMessage = payload => ({\n  type: PUSH_MESSAGE,\n  payload,\n});\n\nexport const actionSetUser = payload => ({\n  type: SET_USER,\n  payload,\n});\n\nexport const actionSetTopic = payload => ({\n  type: SET_TOPIC,\n  payload,\n});\n\n\nexport const actionSetIpfsNode = payload => ({\n  type: SET_IPFS,\n  payload,\n});\n","import React, { useState, useCallback, useContext } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { AppDispatchContext } from '../state/app-context';\nimport { actionSetTopic, actionSetUser } from '../state/state-actions';\n\nexport function JoinForm() {\n  const [user, setUser] = useState('');\n  const [topic, setTopic] = useState('');\n  const dispatch = useContext(AppDispatchContext);\n\n  const handleJoin = useCallback((ev) => {\n    ev.preventDefault();\n\n    dispatch(actionSetUser(user));\n    dispatch(actionSetTopic(topic));\n  }, [user, topic, dispatch]);\n\n  return (\n    <React.Fragment>\n      <form onSubmit={handleJoin}>\n        <input\n          value={user}\n          onChange={ev => setUser(ev.target.value)}\n          placeholder=\"your user name\"\n        />\n        <input\n          className=\"mg-bottom-16\"\n          value={topic}\n          onChange={ev => setTopic(ev.target.value)}\n          placeholder=\"topic to subscribe\"\n        />\n        <button type=\"submit\">join!</button>\n      </form>\n    </React.Fragment>\n  );\n}\n\nexport default withRouter(JoinForm);\n","import React, { useContext, useEffect } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { shape, func } from 'prop-types';\nimport JoinForm from '../components/join-form';\nimport { AppDispatchContext, AppStateContext } from '../state/app-context';\nimport { actionPushMessage, actionSetIpfsNode } from '../state/state-actions';\n\nexport function JoinPage(props) {\n  const state = useContext(AppStateContext);\n  const dispatch = useContext(AppDispatchContext);\n  const { history } = props;\n\n  useEffect(() => {\n    if (state.user && state.topic) {\n      try {\n        const ipfs = new window.Ipfs({\n          EXPERIMENTAL: {\n            pubsub: true,\n          },\n          repo: `ipfs-${Math.random()}`,\n          config: {\n            Addresses: {\n              Swarm: ['/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star'],\n            },\n          },\n        });\n\n        ipfs.once('start', async () => {\n          const id = await ipfs.id();\n\n          if (id) {\n            ipfs.pubsub.subscribe(state.topic, (msg) => {\n              dispatch(actionPushMessage(msg));\n            });\n\n            dispatch(actionSetIpfsNode(ipfs));\n            history.push('/chat');\n          }\n        });\n      } catch (e) {\n        throw e;\n      }\n    }\n  }, [state.user, state.topic, dispatch, history]);\n\n  return (\n    <div className=\"page__join\">\n      <div className=\"mg-bottom-32\">\n        <h1>Hellow</h1>\n        <h4>Welcome to IPFS Chat!</h4>\n      </div>\n\n      <JoinForm />\n    </div>\n  );\n}\n\nJoinPage.propTypes = {\n  history: shape({\n    push: func.isRequired,\n  }).isRequired,\n};\n\nexport default withRouter(JoinPage);\n","import React, { useContext } from 'react';\nimport { AppStateContext } from '../state/app-context';\n\nexport default function Header() {\n  const { user, topic } = useContext(AppStateContext);\n\n  return (\n    <header className=\"header\">\n      <p>\n        {user}\n        {' '}\n@\n        {' '}\n        {topic}\n      </p>\n    </header>\n  );\n}\n","import React, { useContext } from 'react';\nimport { shape, object } from 'prop-types';\nimport { AppStateContext } from '../state/app-context';\n\nexport default function Message(props) {\n  const { message } = props;\n  const { user } = useContext(AppStateContext);\n\n  const msgId = message.seqno.toString();\n  const rawMessage = message.data.toString();\n  const dataMessage = JSON.parse(rawMessage);\n  const className = `message ${dataMessage.fromUser === user ? 'my-message' : 'other-message'}`;\n\n  return (\n    <li key={msgId}>\n      <div className={className}>\n        <p className=\"message__author\">{dataMessage.fromUser}</p>\n        <p className=\"message__text\">{dataMessage.message}</p>\n      </div>\n    </li>\n  );\n}\n\nMessage.propTypes = {\n  message: shape({\n    seqno: object.isRequired,\n    data: object.isRequired,\n  }).isRequired,\n};\n","import React, { useContext } from 'react';\nimport { AppStateContext } from '../state/app-context';\nimport Message from './message';\n\nexport default function Messages() {\n  const { messages } = useContext(AppStateContext);\n\n  return (\n    <React.Fragment>\n      <ul className=\"messages\">\n        {messages.map(message => <Message message={message} />)}\n      </ul>\n    </React.Fragment>\n  );\n}\n","import React, { useEffect, useContext } from 'react';\nimport { shape, func } from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport Header from '../components/header';\nimport Messages from '../components/messages';\nimport NewMessage from '../components/new-message';\nimport { AppStateContext } from '../state/app-context';\n\nexport function ChatPage(props) {\n  const { ipfs } = useContext(AppStateContext);\n  const { history } = props;\n\n  useEffect(() => {\n    if (!ipfs) {\n      history.push('/');\n    }\n  }, [history, ipfs]);\n\n  return (\n    <div className=\"page__chat\">\n      <Header />\n      <Messages />\n      <NewMessage />\n    </div>\n  );\n}\n\nChatPage.propTypes = {\n  history: shape({\n    push: func.isRequired,\n  }).isRequired,\n};\n\nexport default withRouter(ChatPage);\n","import {\n  PUSH_MESSAGE, SET_IPFS, SET_TOPIC, SET_USER,\n} from './state-types';\n\nexport const INITIAL_STATE = {\n  user: null,\n  topic: '',\n  messages: [],\n  ipfs: null,\n};\n\n/**\n *\n * @param {object} state\n * @param {object} action\n * @param {string} action.type\n * @param {object|string} action.payload\n * @returns {*|{user: *}|{topic: *}|{messages: *[]}}\n */\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case PUSH_MESSAGE:\n      return { ...state, messages: [...state.messages, action.payload] };\n    case SET_USER:\n      return { ...state, user: action.payload };\n    case SET_TOPIC:\n      return { ...state, topic: action.payload };\n    case SET_IPFS:\n      return { ...state, ipfs: action.payload };\n    default:\n      return state;\n  }\n}\n","import React, { useReducer } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport JoinPage from './pages/join-page';\nimport ChatPage from './pages/chat-page';\nimport reducer, { INITIAL_STATE } from './state/app-reducer';\nimport { AppDispatchContext, AppStateContext } from './state/app-context';\n\n/**\n * App main component\n * @returns {*}\n */\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n\n  return (\n    <React.Fragment>\n      <AppDispatchContext.Provider value={dispatch}>\n        <AppStateContext.Provider value={state}>\n          <Router basename=\"/ipfs-chat\">\n            <div className=\"page\">\n              <Route path=\"/\" exact component={JoinPage} />\n              <Route path=\"/chat\" component={ChatPage} />\n            </div>\n          </Router>\n        </AppStateContext.Provider>\n      </AppDispatchContext.Provider>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}