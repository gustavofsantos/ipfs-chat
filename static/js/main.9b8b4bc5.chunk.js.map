{"version":3,"sources":["components/new-message.js","state/app-context.js","state/state-types.js","state/state-actions.js","components/join-form.js","pages/join-page.js","components/header.js","components/message.js","components/messages.js","pages/chat-page.js","state/app-reducer.js","App.js","serviceWorker.js","index.js"],"names":["NewMessage","_useState","useState","_useState2","Object","_home_runner_work_ipfs_chat_ipfs_chat_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","message","setMessage","_useContext","useContext","AppStateContext","ipfs","topic","user","handleChange","useCallback","ev","target","value","handleSubmit","preventDefault","pubsub","publish","Buffer","from","JSON","stringify","fromUser","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","Fragment","className","onSubmit","onChange","type","__webpack_require__","d","__webpack_exports__","AppDispatchContext","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","React","createContext","SET_IPFS","SET_USER","SET_TOPIC","PUSH_MESSAGE","actionPushMessage","payload","actionSetUser","actionSetTopic","actionSetIpfsNode","withRouter","slicedToArray","setUser","_useState3","_useState4","setTopic","dispatch","handleJoin","react_default","placeholder","props","state","history","useEffect","window","Ipfs","create","EXPERIMENTAL","repo","concat","Math","random","then","subscribe","msg","push","join_form","Header","Message","msgId","seqno","toString","rawMessage","data","dataMessage","parse","key","Messages","messages","map","new_message","INITIAL_STATE","reducer","action","objectSpread2","toConsumableArray","App","_useReducer","useReducer","_useReducer2","app_context","Provider","react_router_dom","basename","react_router","path","exact","component","JoinPage","ChatPage","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9b8b4bc5.chunk.js","sourcesContent":["import React, { useCallback, useState, useContext } from 'react';\nimport { AppStateContext } from '../state/app-context';\n\nexport default function NewMessage() {\n  const [message, setMessage] = useState('');\n  const { ipfs, topic, user } = useContext(AppStateContext);\n\n  const handleChange = useCallback((ev) => {\n    setMessage(ev.target.value);\n  }, []);\n\n  const handleSubmit = useCallback((ev) => {\n    ev.preventDefault();\n\n    ipfs.pubsub.publish(topic, Buffer.from(JSON.stringify({\n      fromUser: user,\n      message,\n    })));\n\n    setMessage('');\n  }, [message, ipfs, topic, user]);\n\n  return (\n    <React.Fragment>\n      <form className=\"new-message\" onSubmit={handleSubmit}>\n        <input className=\"new-message__input\" value={message} onChange={handleChange} />\n        <button className=\"new-message__button\" type=\"submit\">send</button>\n      </form>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\n\nexport const AppStateContext = React.createContext(null);\nexport const AppDispatchContext = React.createContext(null);\n","export const SET_IPFS = 'APP_SET_IPFS_NODE';\n\n// chat action types\nexport const SET_USER = 'CHAT_SET_USER';\nexport const SET_TOPIC = 'CHAT_SET_TOPIC';\nexport const PUSH_MESSAGE = 'CHAT_PUSH_MESSAGE';\n","import {\n  PUSH_MESSAGE, SET_IPFS, SET_TOPIC, SET_USER,\n} from './state-types';\n\nexport const actionPushMessage = payload => ({\n  type: PUSH_MESSAGE,\n  payload,\n});\n\nexport const actionSetUser = payload => ({\n  type: SET_USER,\n  payload,\n});\n\nexport const actionSetTopic = payload => ({\n  type: SET_TOPIC,\n  payload,\n});\n\n\nexport const actionSetIpfsNode = payload => ({\n  type: SET_IPFS,\n  payload,\n});\n","import React, { useState, useCallback, useContext } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { AppDispatchContext } from '../state/app-context';\nimport { actionSetTopic, actionSetUser } from '../state/state-actions';\n\nexport function JoinForm() {\n  const [user, setUser] = useState('');\n  const [topic, setTopic] = useState('');\n  const dispatch = useContext(AppDispatchContext);\n\n  const handleJoin = useCallback((ev) => {\n    ev.preventDefault();\n\n    dispatch(actionSetUser(user));\n    dispatch(actionSetTopic(topic));\n  }, [user, topic, dispatch]);\n\n  return (\n    <React.Fragment>\n      <form onSubmit={handleJoin}>\n        <input\n          value={user}\n          onChange={ev => setUser(ev.target.value)}\n          placeholder=\"your user name\"\n        />\n        <input\n          className=\"mg-bottom-16\"\n          value={topic}\n          onChange={ev => setTopic(ev.target.value)}\n          placeholder=\"topic to subscribe\"\n        />\n        <button type=\"submit\">join!</button>\n      </form>\n    </React.Fragment>\n  );\n}\n\nexport default withRouter(JoinForm);\n","import React, { useContext, useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { shape, func } from \"prop-types\";\nimport JoinForm from \"../components/join-form\";\nimport { AppDispatchContext, AppStateContext } from \"../state/app-context\";\nimport { actionPushMessage, actionSetIpfsNode } from \"../state/state-actions\";\n\nexport function JoinPage(props) {\n  const state = useContext(AppStateContext);\n  const dispatch = useContext(AppDispatchContext);\n  const { history } = props;\n\n  useEffect(() => {\n    if (state.user && state.topic) {\n      window.Ipfs.create({\n        EXPERIMENTAL: {\n          pubsub: true,\n        },\n        repo: `ipfs-${Math.random()}`,\n      })\n        .then((ipfs) => {\n          dispatch(actionSetIpfsNode(ipfs));\n          return ipfs;\n        })\n        .then((ipfs) => {\n          return ipfs.pubsub.subscribe(state.topic, (msg) => {\n            dispatch(actionPushMessage(msg));\n          });\n        })\n        .then(() => {\n          history.push(\"/chat\");\n        });\n    }\n  }, [state.user, state.topic, dispatch, history]);\n\n  return (\n    <div className=\"page__join\">\n      <div className=\"mg-bottom-32\">\n        <h1>Hellow</h1>\n        <h4>Welcome to IPFS Chat!</h4>\n      </div>\n\n      <JoinForm />\n    </div>\n  );\n}\n\nJoinPage.propTypes = {\n  history: shape({\n    push: func.isRequired,\n  }).isRequired,\n};\n\nexport default withRouter(JoinPage);\n","import React, { useContext } from 'react';\nimport { AppStateContext } from '../state/app-context';\n\nexport default function Header() {\n  const { user, topic } = useContext(AppStateContext);\n\n  return (\n    <header className=\"header\">\n      <p>\n        {user}\n        {' '}\n@\n        {' '}\n        {topic}\n      </p>\n    </header>\n  );\n}\n","import React, { useContext } from 'react';\nimport { shape, object } from 'prop-types';\nimport { AppStateContext } from '../state/app-context';\n\nexport default function Message(props) {\n  const { message } = props;\n  const { user } = useContext(AppStateContext);\n\n  const msgId = message.seqno.toString();\n  const rawMessage = message.data.toString();\n  const dataMessage = JSON.parse(rawMessage);\n  const className = `message ${dataMessage.fromUser === user ? 'my-message' : 'other-message'}`;\n\n  return (\n    <li key={msgId}>\n      <div className={className}>\n        <p className=\"message__author\">{dataMessage.fromUser}</p>\n        <p className=\"message__text\">{dataMessage.message}</p>\n      </div>\n    </li>\n  );\n}\n\nMessage.propTypes = {\n  message: shape({\n    seqno: object.isRequired,\n    data: object.isRequired,\n  }).isRequired,\n};\n","import React, { useContext } from 'react';\nimport { AppStateContext } from '../state/app-context';\nimport Message from './message';\n\nexport default function Messages() {\n  const { messages } = useContext(AppStateContext);\n\n  return (\n    <React.Fragment>\n      <ul className=\"messages\">\n        {messages.map(message => <Message message={message} />)}\n      </ul>\n    </React.Fragment>\n  );\n}\n","import React, { useEffect, useContext } from 'react';\nimport { shape, func } from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport Header from '../components/header';\nimport Messages from '../components/messages';\nimport NewMessage from '../components/new-message';\nimport { AppStateContext } from '../state/app-context';\n\nexport function ChatPage(props) {\n  const { ipfs } = useContext(AppStateContext);\n  const { history } = props;\n\n  useEffect(() => {\n    if (!ipfs) {\n      history.push('/');\n    }\n  }, [history, ipfs]);\n\n  return (\n    <div className=\"page__chat\">\n      <Header />\n      <Messages />\n      <NewMessage />\n    </div>\n  );\n}\n\nChatPage.propTypes = {\n  history: shape({\n    push: func.isRequired,\n  }).isRequired,\n};\n\nexport default withRouter(ChatPage);\n","import {\n  PUSH_MESSAGE, SET_IPFS, SET_TOPIC, SET_USER,\n} from './state-types';\n\nexport const INITIAL_STATE = {\n  user: null,\n  topic: '',\n  messages: [],\n  ipfs: null,\n};\n\n/**\n *\n * @param {object} state\n * @param {object} action\n * @param {string} action.type\n * @param {object|string} action.payload\n * @returns {*|{user: *}|{topic: *}|{messages: *[]}}\n */\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case PUSH_MESSAGE:\n      return { ...state, messages: [...state.messages, action.payload] };\n    case SET_USER:\n      return { ...state, user: action.payload };\n    case SET_TOPIC:\n      return { ...state, topic: action.payload };\n    case SET_IPFS:\n      return { ...state, ipfs: action.payload };\n    default:\n      return state;\n  }\n}\n","import React, { useReducer } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport JoinPage from './pages/join-page';\nimport ChatPage from './pages/chat-page';\nimport reducer, { INITIAL_STATE } from './state/app-reducer';\nimport { AppDispatchContext, AppStateContext } from './state/app-context';\n\n/**\n * App main component\n * @returns {*}\n */\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n\n  return (\n    <React.Fragment>\n      <AppDispatchContext.Provider value={dispatch}>\n        <AppStateContext.Provider value={state}>\n          <Router basename=\"/ipfs-chat\">\n            <div className=\"page\">\n              <Route path=\"/\" exact component={JoinPage} />\n              <Route path=\"/chat\" component={ChatPage} />\n            </div>\n          </Router>\n        </AppStateContext.Provider>\n      </AppDispatchContext.Provider>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}